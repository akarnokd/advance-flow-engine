/*
 * Copyright 2010-2012 The Advance EU 7th Framework project consortium
 *
 * This file is part of Advance.
 *
 * Advance is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Advance is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Advance.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
package eu.advance.logistics.flow.editor;

import com.google.common.collect.Lists;
import java.io.File;
import java.io.FileFilter;
import java.util.List;
import javax.swing.AbstractListModel;

/**
 *
 * @author TTS
 */
public class OpenFlowDialog extends javax.swing.JDialog {
    public final static String NAME = "openFlowDialog"; // NOI18N used for testing
    public final static String OPEN_NAME = "openButton"; // NOI18N used for testing

    public OpenFlowDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        if (jList1.getModel().getSize() > 0) {
            jList1.setSelectedIndex(0);
        }
        setName("NAME");
        openButton.setName(OPEN_NAME);                
        getRootPane().setDefaultButton(openButton);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        openButton.setText(org.openide.util.NbBundle.getMessage(OpenFlowDialog.class, "OpenFlowDialog.openButton.text")); // NOI18N
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(org.openide.util.NbBundle.getMessage(OpenFlowDialog.class, "OpenFlowDialog.cancelButton.text")); // NOI18N

        jList1.setModel(new FileModel());
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, openButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        List<File> selected = getSelectedFiles();
        if (!selected.isEmpty()) {
            setVisible(false);
            for (File f : selected) {
                OpenFlowAction.open(f);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 2) {
            final File selected = getSelectedFile();
            if (selected != null) {
                setVisible(false);
                OpenFlowAction.open(selected);
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    private class FileModel extends AbstractListModel {

        private final File[] files;
        private final String[] fileNames;

        public FileModel() {
            final File workspace = getWorkspaceDir();
            files = workspace.listFiles(new FileFilter() {

                @Override
                public boolean accept(File pathname) {
                    return pathname.isFile() && pathname.getName().toLowerCase().endsWith(".xml");
                }
            });

            fileNames = new String[files.length];
            for (int i = 0, n = files.length; i < n; i++) {
                fileNames[i] = files[i].getName();
            }
        }

        @Override
        public int getSize() {
            return fileNames.length;
        }

        @Override
        public Object getElementAt(int index) {
            return fileNames[index];
        }

        public File getFileAt(int index) {
            return files[index];
        }
    }

    private final File getSelectedFile() {
        final int index = jList1.getSelectedIndex();

        if (index == -1) {
            return null;
        } else {
            return ((FileModel) jList1.getModel()).getFileAt(index);
        }
    }
    /**
     * Returns a list of the selected files.
     * @return the list of files
     */
    private List<File> getSelectedFiles() {
        List<File> result = Lists.newArrayList();
        for (int idx : jList1.getSelectedIndices()) {
            result.add(((FileModel) jList1.getModel()).getFileAt(idx));
        }
        return result;
    }

    private static File getWorkspaceDir() {
        final String userHome = System.getProperty("user.home");
        final File workspace = new File(userHome, ".advance-flow-editor-ws");
        if (!workspace.exists()) {
            workspace.mkdir();
        }
        return workspace;

    }
    /**
     * @param args the command line arguments
     */
    /*    public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    
    public void run() {
    OpenFlowDialog dialog = new OpenFlowDialog(new javax.swing.JFrame(), true);
    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
    
    public void windowClosing(java.awt.event.WindowEvent e) {
    System.exit(0);
    }
    });
    dialog.setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
