/*
 * Copyright 2010-2012 The Advance EU 7th Framework project consortium
 *
 * This file is part of Advance.
 *
 * Advance is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Advance is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Advance.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
package eu.advance.logistics.flow.editor.actions;

import eu.advance.logistics.flow.editor.BlockRegistry;
import eu.advance.logistics.flow.engine.model.fd.AdvanceBlockParameterDescription;
import eu.advance.logistics.flow.engine.model.fd.AdvanceType;
import eu.advance.logistics.flow.engine.xml.typesystem.XElement;
import java.net.URI;
import javax.swing.JRadioButton;
import org.openide.util.Exceptions;
import org.openide.windows.WindowManager;

/**
 *
 * @author TTS
 */
public class ParameterDescriptionDialog extends javax.swing.JDialog {

    private String tag;
    private AdvanceBlockParameterDescription paramDesc;

    public ParameterDescriptionDialog(String tag) {
        super(WindowManager.getDefault().getMainWindow(), true);
        this.tag = tag;

        initComponents();
        setMinimumSize(getSize());
        setLocationRelativeTo(getOwner());
        getRootPane().setDefaultButton(okButton);
        setType("advance:integer");
        setTitle("Add new " + tag);
    }

    public AdvanceBlockParameterDescription getParameterDescription() {
        return paramDesc;
    }

    private void setType(String type) {
        try {
            AdvanceType t = new AdvanceType();
            t.typeURI = new URI(type);
            t.type = BlockRegistry.getInstance().getXTypes().get(type);
            setType(t);
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            customTypeText.setText("");
        }
    }

    private String getId() {
        String id = idText.getText();
        return (id != null) ? id.trim() : "";
    }

    private void setType(AdvanceType type) {
        if (type != null) {
            paramDesc = new AdvanceBlockParameterDescription();
            paramDesc.id = getId();
            paramDesc.displayName = jTextField1.getText();
            paramDesc.documentation = jTextPane1.getText();
            paramDesc.type = type;
            XElement temp = new XElement(tag);
            paramDesc.save(temp);
            customTypeText.setText(temp.toString());
        } else {
            paramDesc = null;
            customTypeText.setText("");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        optionInteger = new javax.swing.JRadioButton();
        optionReal = new javax.swing.JRadioButton();
        optionString = new javax.swing.JRadioButton();
        optionCustom = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        optionBoolean = new javax.swing.JRadioButton();
        optionTimestamp = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customTypeText = new javax.swing.JTextArea();
        idLabel = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(optionInteger);
        optionInteger.setLabel("Integer [advance:integer]"); // NOI18N
        optionInteger.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionIntegerItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 5);
        getContentPane().add(optionInteger, gridBagConstraints);

        buttonGroup1.add(optionReal);
        optionReal.setLabel("Real [advance:real]"); // NOI18N
        optionReal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionRealItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(optionReal, gridBagConstraints);

        buttonGroup1.add(optionString);
        optionString.setLabel("String [advance:string]"); // NOI18N
        optionString.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionStringItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(optionString, gridBagConstraints);

        buttonGroup1.add(optionCustom);
        optionCustom.setLabel(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.optionCustom.label")); // NOI18N
        optionCustom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionCustomItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(optionCustom, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

        okButton.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.okButton.text")); // NOI18N
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton);

        cancelButton.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        buttonGroup1.add(optionBoolean);
        optionBoolean.setLabel("Boolean [advance:boolean]"); // NOI18N
        optionBoolean.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionBooleanItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(optionBoolean, gridBagConstraints);

        buttonGroup1.add(optionTimestamp);
        optionTimestamp.setLabel("Timestamp [advance:timestamp]"); // NOI18N
        optionTimestamp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionTimestampItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(optionTimestamp, gridBagConstraints);

        customTypeText.setColumns(20);
        customTypeText.setEditable(false);
        customTypeText.setRows(5);
        customTypeText.setEnabled(false);
        jScrollPane1.setViewportView(customTypeText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        idLabel.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.idLabel.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 5);
        getContentPane().add(idLabel, gridBagConstraints);

        idText.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.idText.text")); // NOI18N
        idText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextActionPerformed(evt);
            }
        });
        idText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                idTextPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 10);
        getContentPane().add(idText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.jLabel1.text_1")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        getContentPane().add(jLabel2, gridBagConstraints);

        jTextField1.setText(org.openide.util.NbBundle.getMessage(ParameterDescriptionDialog.class, "ParameterDescriptionDialog.jTextField1.text")); // NOI18N
        jTextField1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField1PropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        getContentPane().add(jTextField1, gridBagConstraints);

        jTextPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextPane1PropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 10);
        getContentPane().add(jScrollPane2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    dispose();
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    paramDesc = null;
    dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    private void optionIntegerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionIntegerItemStateChanged
        setType("advance:integer");
    }//GEN-LAST:event_optionIntegerItemStateChanged

    private void optionRealItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionRealItemStateChanged
        setType("advance:real");
    }//GEN-LAST:event_optionRealItemStateChanged

    private void optionStringItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionStringItemStateChanged
        setType("advance:string");
    }//GEN-LAST:event_optionStringItemStateChanged

    private void optionCustomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionCustomItemStateChanged
        boolean en = ((JRadioButton) evt.getSource()).isSelected();
        customTypeText.setEditable(en);
        customTypeText.setEnabled(en);
        setType(BlockRegistry.getInstance().getDefaultAdvanceType());
    }//GEN-LAST:event_optionCustomItemStateChanged

    private void optionBooleanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionBooleanItemStateChanged
        setType("advance:boolean");
    }//GEN-LAST:event_optionBooleanItemStateChanged

    private void optionTimestampItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionTimestampItemStateChanged
        setType("advance:timestamp");
    }//GEN-LAST:event_optionTimestampItemStateChanged

    private void idTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextActionPerformed
        if (paramDesc != null && paramDesc.type != null) {
            setType(paramDesc.type);
        }
        okButton.setEnabled(getId().length() > 0);
    }//GEN-LAST:event_idTextActionPerformed

    private void idTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_idTextPropertyChange
        if (evt.getPropertyName().equals("text")) {
            if (paramDesc != null && paramDesc.type != null) {
                setType(paramDesc.type);
            }
            okButton.setEnabled(getId().length() > 0);
        }
    }//GEN-LAST:event_idTextPropertyChange

    private void jTextField1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField1PropertyChange
        idTextPropertyChange(evt);
    }//GEN-LAST:event_jTextField1PropertyChange

    private void jTextPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextPane1PropertyChange
        idTextPropertyChange(evt);
    }//GEN-LAST:event_jTextPane1PropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextArea customTypeText;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton optionBoolean;
    private javax.swing.JRadioButton optionCustom;
    private javax.swing.JRadioButton optionInteger;
    private javax.swing.JRadioButton optionReal;
    private javax.swing.JRadioButton optionString;
    private javax.swing.JRadioButton optionTimestamp;
    // End of variables declaration//GEN-END:variables
}
