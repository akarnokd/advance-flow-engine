/*
 * Copyright 2010-2012 The Advance EU 7th Framework project consortium
 *
 * This file is part of Advance.
 *
 * Advance is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * Advance is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Advance.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
package eu.advance.logistics.flow.editor.notify;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.beans.BeanInfo;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.NodeTableModel;
import org.openide.explorer.view.TableView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays errors and warnings.
 *
 * @author TTS - Technology Transfer System S.r.l.
 */
@ConvertAsProperties(
        dtd = "-//eu.advance.logistics.flow.editor.notify//Notify//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "NotifyTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "eu.advance.logistics.flow.editor.notify.NotifyTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NotifyAction",
        preferredID = "NotifyTopComponent")
@Messages({
    "CTL_NotifyAction=Errors & Warnings",
    "CTL_NotifyTopComponent=Errors & Warnings",
    "HINT_NotifyTopComponent=List of errors and warnings"
})
public final class NotifyTopComponent extends TopComponent
        implements ExplorerManager.Provider {

    private ExplorerManager explorerManager = new ExplorerManager();
    private Ch ch = new Ch();
    private TableView view;

    public NotifyTopComponent() {
        initComponents();
        setName(Bundle.CTL_NotifyTopComponent());
        setToolTipText(Bundle.HINT_NotifyTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

        explorerManager.setRootContext(new AbstractNode(ch));

        NodeTableModel model = new NodeTableModel();
        model.setProperties(new MessageNode(new Message()).createProperties());
        view = new TableView(model);
        view.getNodePopupFactory().setShowQuickFilter(false);
        view.getTable().setShowVerticalLines(false);
        view.getTable().setGridColor(Color.LIGHT_GRAY);
        view.getTable().setDefaultRenderer(Node.Property.class, new CellRenderer());

        setLayout(new BorderLayout());
        add(view, BorderLayout.CENTER);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

    }

    @Override
    public void componentClosed() {

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void add(Message msg) {
        ch.add(msg);
    }

    public void remove(Message msg) {
        ch.remove(msg);
    }

    public static NotifyTopComponent getInstance() {
        return (NotifyTopComponent) WindowManager.getDefault().findTopComponent("NotifyTopComponent");
    }

    private static class Ch extends Children.Keys<Message> {

        private List<Message> messages = new ArrayList<Message>();

        void add(Message msg) {
            messages.add(msg);
            setKeys(messages);
            refresh();
        }

        void remove(Message msg) {
            messages.remove(msg);
            setKeys(messages);
            refresh();
        }

        @Override
        protected Node[] createNodes(Message key) {
            return new Node[]{new MessageNode(key)};
        }
    }

    private static class DummyAction extends AbstractAction {

        private DummyAction(String name) {
            super(name);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
        }
    }

    private static class CellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            Node.Property<String> prop = (Node.Property<String>) value;
            try {
                setText(prop.getValue());
            } catch (IllegalAccessException ex) {
                Exceptions.printStackTrace(ex);
            } catch (InvocationTargetException ex) {
                Exceptions.printStackTrace(ex);
            }
            if (column == 0) {
                Node node = (Node) prop.getValue("node");
                setIcon(ImageUtilities.image2Icon(node.getIcon(BeanInfo.ICON_COLOR_16x16)));
            } else {
                setIcon(null);
            }
            return this;
        }
    }
}
